PASSED: Number.hasOwnProperty('MAX_VALUE') [Number.as:36]
PASSED: typeof(Number.MAX_VALUE) == "number" [Number.as:37]
XPASSED: Number.MAX_VALUE.toString() == "1.79769313486231e+308" [Number.as:40]
PASSED: Number.hasOwnProperty('MIN_VALUE') [Number.as:42]
PASSED: typeof(Number.MIN_VALUE) == "number" [Number.as:43]
PASSED: Number.MIN_VALUE.toString() == "4.94065645841247e-324" [Number.as:44]
PASSED: Number.hasOwnProperty('NEGATIVE_INFINITY') [Number.as:46]
PASSED: Number.NEGATIVE_INFINITY == -Infinity [Number.as:47]
PASSED: Number.hasOwnProperty('NaN') [Number.as:49]
PASSED: Number.NaN == NaN [Number.as:50]
PASSED: Number.hasOwnProperty('POSITIVE_INFINITY') [Number.as:52]
PASSED: Number.POSITIVE_INFINITY == Infinity [Number.as:53]
PASSED: typeof(n1) == 'object' [Number.as:56]
PASSED: typeof(n1prim) == 'number' [Number.as:58]
PASSED: n1 == n1prim [Number.as:61]
PASSED: n1 == 268 [Number.as:71]
PASSED: 268 == n1 [Number.as:72]
PASSED: typeof(n1.toString) == "function" [Number.as:78]
PASSED: typeof(n1.toString()) == "string" [Number.as:79]
PASSED: n1.toString() == "268" [Number.as:80]
PASSED: n1.toString() == "268" [Number.as:84]
PASSED: tmp.toString(2) == '1010' [Number.as:92]
PASSED: tmp.toString(2) == '110' [Number.as:94]
PASSED: tmp.toString(3) == '20' [Number.as:95]
PASSED: tmp.toString(8) == '6' [Number.as:96]
PASSED: tmp.toString(-2) == '6' [Number.as:97]
PASSED: tmp.toString(0) == '6' [Number.as:98]
PASSED: tmp.toString(5) == '11' [Number.as:99]
PASSED: tmp.toString(2) == '-101' [Number.as:101]
PASSED: tmp.toString(16) == '-5' [Number.as:102]
PASSED: tmp.toString(16) == '-b' [Number.as:104]
PASSED: typeof(n1.valueOf) == "function" [Number.as:110]
PASSED: typeof(n1.__proto__.valueOf) == "function" [Number.as:111]
PASSED: typeof(n1.__proto__.__proto__.valueOf) == "function" [Number.as:112]
PASSED: typeof(n1.valueOf()) == "number" [Number.as:113]
PASSED: n1.valueOf() == 268 [Number.as:114]
PASSED: n1.valueOf() == 268 [Number.as:123]
PASSED: n1.valueOf() == "fake_value" [Number.as:128]
PASSED: -268 == n1 [Number.as:133]
PASSED: n1.toString() == "-268" [Number.as:134]
PASSED: typeof(NaN) == 'number' [Number.as:140]
PASSED: typeof(isNaN) == 'function' [Number.as:141]
PASSED: typeof(isNaN(NaN)) == 'boolean' [Number.as:142]
PASSED: NaN == NaN [Number.as:143]
PASSED: (0/2) == (0/5) [Number.as:144]
PASSED: ! (NaN != NaN) [Number.as:145]
PASSED: isNaN(NaN) [Number.as:146]
PASSED: typeof(isNaN(0/0)) == 'boolean' [Number.as:147]
PASSED: isNaN(0/0) [Number.as:148]
PASSED: typeof(_global) == 'undefined' [Number.as:156]
PASSED: typeof(Object) == 'function' [Number.as:157]
PASSED: typeof(Object.prototype) == 'object' [Number.as:158]
PASSED: typeof(Object.prototype.NaN) == 'undefined' [Number.as:159]
PASSED: ! isNaN(undefined) [Number.as:167]
PASSED: ! isNaN(null) [Number.as:168]
PASSED: ! isNaN(Object.prototype.NaN) [Number.as:169]
PASSED: ! Object.hasOwnProperty('NaN') [Number.as:172]
PASSED: ! Object.prototype.hasOwnProperty('NaN') [Number.as:173]
PASSED: ! this.__proto__.hasOwnProperty('NaN') [Number.as:174]
PASSED: typeof(Infinity) == 'number' [Number.as:180]
PASSED: typeof(isFinite) == 'function' [Number.as:181]
PASSED: typeof(isFinite(Infinity)) == 'boolean' [Number.as:182]
PASSED: Infinity == Infinity [Number.as:183]
PASSED: ! isFinite(Infinity) [Number.as:184]
PASSED: typeof(isFinite(0/0)) == 'boolean' [Number.as:185]
PASSED: ! isFinite(0/0) [Number.as:186]
PASSED: typeof(_global) == 'undefined' [Number.as:194]
PASSED: typeof(Object) == 'function' [Number.as:195]
PASSED: typeof(Object.prototype) == 'object' [Number.as:196]
PASSED: typeof(Object.prototype.Infinity) == 'undefined' [Number.as:197]
PASSED: isFinite(undefined) [Number.as:205]
PASSED: isFinite(null) [Number.as:206]
PASSED: isFinite(Object.prototype.NaN) [Number.as:207]
PASSED: ! Object.hasOwnProperty('Infinity') [Number.as:210]
PASSED: ! Object.prototype.hasOwnProperty('Infinity') [Number.as:211]
PASSED: ! this.__proto__.hasOwnProperty('Infinity') [Number.as:212]
PASSED: isNaN(0+this) [Number.as:218]
PASSED: isNaN(this) [Number.as:219]
PASSED: isNaN(this) [Number.as:221]
PASSED: isNaN(o) [Number.as:223]
PASSED: isNaN(0+o) [Number.as:224]
PASSED: 0+o == 3 [Number.as:226]
PASSED: 0+"string" == "0string" [Number.as:227]
PASSED: !isNaN(2+Number) [Number.as:230]
PASSED: !isNaN(2/undefined) [Number.as:241]
PASSED: !isNaN(undefined/2) [Number.as:242]
PASSED: isFinite(undefined/2) [Number.as:243]
PASSED: 2/undefined == Infinity [Number.as:244]
PASSED: !isFinite(Infinity) [Number.as:247]
PASSED: !isFinite(2/undefined) [Number.as:248]
PASSED: typeof(("string"<7)) == 'undefined' [Number.as:250]
PASSED: typeof((7<"string")) == 'undefined' [Number.as:251]
PASSED: typeof(("18"<7)) == 'boolean' [Number.as:252]
PASSED: typeof((7<"18")) == 'boolean' [Number.as:253]
PASSED: ("18"<"7") == true [Number.as:254]
PASSED: ("18"<7) == false [Number.as:255]
PASSED: (7<"18") == true [Number.as:256]
PASSED: typeof(_root<"18") == 'undefined' [Number.as:257]
PASSED: typeof(undefined<7) == 'boolean' [Number.as:277]
PASSED: typeof(undefined>7) == 'boolean' [Number.as:278]
PASSED: typeof(undefined<-7) == 'boolean' [Number.as:279]
PASSED: typeof(undefined>-7) == 'boolean' [Number.as:280]
PASSED: typeof(7<undefined) == 'boolean' [Number.as:281]
PASSED: typeof(7>undefined) == 'boolean' [Number.as:282]
PASSED: typeof(-7<undefined) == 'boolean' [Number.as:283]
PASSED: typeof(-7>undefined) == 'boolean' [Number.as:284]
PASSED: (undefined<7) == true [Number.as:286]
PASSED: (undefined>7) == false [Number.as:287]
PASSED: (undefined<-7) == false [Number.as:288]
PASSED: (undefined>-7) == true [Number.as:289]
PASSED: (7<undefined) == false [Number.as:290]
PASSED: (7>undefined) == true [Number.as:291]
PASSED: (-7<undefined) == true [Number.as:292]
PASSED: (-7>undefined) == false [Number.as:293]
PASSED: '0' + -1 == '0-1' [Number.as:297]
PASSED: '00' == 0 [Number.as:300]
PASSED: "0xFF0000" != 0xFF0000 [Number.as:309]
PASSED: "0XFF0000" != 0xFF0000 [Number.as:310]
PASSED: isNaN("0xff000z") [Number.as:313]
PASSED: typeof(Number.prototype.valueOf) == 'function' [Number.as:315]
PASSED: typeof(Number.prototype.toString) == 'function' [Number.as:316]
PASSED: !isNaN(Number.valueOf()) [Number.as:320]
PASSED: typeof(Number) == 'function' [Number.as:323]
PASSED: Number.hasOwnProperty('prototype') [Number.as:324]
PASSED: Number.hasOwnProperty('__proto__') [Number.as:325]
PASSED: Number.hasOwnProperty('constructor') [Number.as:326]
PASSED: typeof(Number.prototype) == 'object' [Number.as:327]
PASSED: Number.prototype == Object [Number.as:329]
PASSED: Number.prototype == Function [Number.as:330]
PASSED: Number.prototype == Object.__proto__ [Number.as:331]
PASSED: Number.prototype == null [Number.as:332]
PASSED: Number.prototype == undefined [Number.as:333]
PASSED: Number.prototype != 0 [Number.as:334]
PASSED: Number.prototype != "string" [Number.as:335]
PASSED: typeof(Number.valueOf) == 'undefined' [Number.as:342]
PASSED: typeof(Number.toString) == 'undefined' [Number.as:343]
PASSED: typeof(Number.__proto__) == 'undefined' [Number.as:344]
PASSED: typeof(Number.__proto__) == 'object' [Number.as:349]
PASSED: Number.prototype.__proto__ == Object.prototype [Number.as:350]
PASSED: typeof(Number.toString) == 'function' [Number.as:352]
PASSED: typeof(Number.valueOf) == 'function' [Number.as:353]
PASSED: !Number.hasOwnProperty('valueOf') [Number.as:354]
PASSED: !Number.hasOwnProperty('toString') [Number.as:355]
PASSED: !Number.__proto__.hasOwnProperty('valueOf') [Number.as:356]
PASSED: !Number.__proto__.hasOwnProperty('toString') [Number.as:357]
PASSED: Number.__proto__.__proto__ == Object.prototype [Number.as:358]
PASSED: typeof(Number.valueOf()) == 'function' [Number.as:360]
PASSED: typeof(a.toString) == 'function' [Number.as:363]
PASSED: typeof(a.valueOf) == 'function' [Number.as:364]
PASSED: !a.hasOwnProperty('valueOf') [Number.as:365]
PASSED: a.__proto__.hasOwnProperty('valueOf') [Number.as:371]
PASSED: !a.hasOwnProperty('toString') [Number.as:372]
PASSED: typeof(anum.toString) == 'function' [Number.as:376]
PASSED: typeof(anum.valueOf) == 'function' [Number.as:377]
PASSED: !anum.hasOwnProperty('valueOf') [Number.as:378]
PASSED: anum.__proto__.hasOwnProperty('valueOf') [Number.as:379]
PASSED: !anum.hasOwnProperty('toString') [Number.as:380]
PASSED: val == 4 [Number.as:390]
PASSED: val == 0 [Number.as:394]
PASSED: !isNaN(val) [Number.as:395]
PASSED: val == 0 [Number.as:402]
PASSED: !isNaN(val) [Number.as:403]
PASSED: val == 10 [Number.as:409]
PASSED: val == 300 [Number.as:412]
PASSED: val == 20 [Number.as:415]
PASSED: isNaN(val) [Number.as:418]
PASSED: val == 2.6 [Number.as:421]
PASSED: isNaN(val) [Number.as:424]
PASSED: isNaN(val) [Number.as:427]
PASSED: val != Infinity [Number.as:430]
PASSED: isNaN(val) [Number.as:431]
PASSED: val != Infinity [Number.as:434]
PASSED: isNaN(val) [Number.as:435]
PASSED: isNaN(val) [Number.as:439]
PASSED: val == 7 [Number.as:443]
PASSED: !isNaN(val) [Number.as:450]
PASSED: typeof(val) == 'number' [Number.as:451]
PASSED: val == 0 [Number.as:452]
PASSED: 0 == val [Number.as:453]
PASSED: val == 9 [Number.as:458]
PASSED: 9 == val [Number.as:459]
PASSED: 450 - undefined == 450 [Number.as:471]
PASSED: a.toString() == "11111111111111.1" [Number.as:486]
PASSED: a.toString() == "111111111111111" [Number.as:489]
PASSED: a.toString() == "1.11111111111111e+15" [Number.as:492]
PASSED: a.toString() == "0.000123456789012346" [Number.as:495]
PASSED: a.toString() == "0.0000123456789012346" [Number.as:498]
PASSED: a.toString() == "1.23456789012346e-6" [Number.as:501]
PASSED: a.toString() == "1.23456789012346e-7" [Number.as:504]
PASSED: a.toString() == "0.0999999999999999" [Number.as:507]
PASSED: a.toString() == "0.999999999999999" [Number.as:510]
PASSED: a.toString() == "0.999999999999999" [Number.as:513]
PASSED: a.toString() == "0.000054" [Number.as:516]
PASSED: a.toString() == "5.4e-6" [Number.as:519]
PASSED: a.toString(10) == "5.4e-6" [Number.as:520]
PASSED: a.toString() == "2.12345678912346" [Number.as:523]
PASSED: a.toString() == "-2.12345678912346" [Number.as:526]
PASSED: a.toString() == "0.123456789123457" [Number.as:529]
PASSED: a.toString() == "-0.123456789123457" [Number.as:532]
PASSED: a.toString() == "1.23456789123456e+308" [Number.as:535]
PASSED: a.toString() == "-1.23456789123456e+308" [Number.as:538]
XPASSED: a.toString() == "1.23456789123457e-308" [Number.as:541]
XPASSED: a.toString() == "-1.23456789123457e-308" [Number.as:544]
XPASSED: a.toString() == "1.23456789123457e-6" [Number.as:547]
XPASSED: a.toString() == "-1.23456789123457e-6" [Number.as:550]
PASSED: a.toString() == "-1.24456789123457e-6" [Number.as:553]
PASSED: a.toString() == "-1.24466789123457e-6" [Number.as:556]
PASSED: a.toString() == "-0.00123456789123457" [Number.as:559]
PASSED: a.toString() == "-0.00124456789123456" [Number.as:562]
PASSED: a.toString() == "-0.00123456789123456" [Number.as:565]
PASSED: a.toString() == "0.00123456789123457" [Number.as:568]
PASSED: a.toString() == "0.00123456789123456" [Number.as:571]
PASSED: isNaN(0/0) [Number.as:573]
check_totals: 213
