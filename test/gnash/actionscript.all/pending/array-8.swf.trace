PASSED: typeof(Array) == 'function' [array.as:25]
PASSED: Array.CASEINSENSITIVE == 1 [array.as:26]
PASSED: Array.DESCENDING == 2 [array.as:27]
PASSED: Array.UNIQUESORT == 4 [array.as:28]
PASSED: Array.RETURNINDEXEDARRAY == 8 [array.as:29]
PASSED: Array.NUMERIC == 16 [array.as:30]
PASSED: typeof(Array.prototype) == 'object' [array.as:31]
PASSED: typeof(Array.prototype.__proto__) == 'object' [array.as:32]
PASSED: Array.prototype.__proto__ == Object.prototype [array.as:33]
PASSED: typeof(Array.prototype.concat) == 'function' [array.as:34]
PASSED: typeof(Array.prototype.join) == 'function' [array.as:35]
PASSED: typeof(Array.prototype.pop) == 'function' [array.as:36]
PASSED: typeof(Array.prototype.push) == 'function' [array.as:37]
PASSED: typeof(Array.prototype.reverse) == 'function' [array.as:38]
PASSED: typeof(Array.prototype.shift) == 'function' [array.as:39]
PASSED: typeof(Array.prototype.slice) == 'function' [array.as:40]
PASSED: typeof(Array.prototype.sort) == 'function' [array.as:41]
PASSED: typeof(Array.prototype.sortOn) == 'function' [array.as:42]
PASSED: typeof(Array.prototype.splice) == 'function' [array.as:43]
PASSED: typeof(Array.prototype.unshift) == 'function' [array.as:44]
PASSED: typeof(Array.prototype.toString) == 'function' [array.as:45]
PASSED: typeof(Array.prototype.length) == 'undefined' [array.as:46]
PASSED: typeof(Array.prototype.size) == 'undefined' [array.as:47]
PASSED: typeof(Array.prototype.CASEINSENSITIVE) == 'undefined' [array.as:48]
PASSED: typeof(Array.prototype.DESCENDING) == 'undefined' [array.as:49]
PASSED: typeof(Array.prototype.UNIQUESORT) == 'undefined' [array.as:50]
PASSED: typeof(Array.prototype.RETURNINDEXEDARRAY) == 'undefined' [array.as:51]
PASSED: typeof(Array.prototype.NUMERIC) == 'undefined' [array.as:52]
PASSED: Array.hasOwnProperty('CASEINSENSITIVE') [array.as:54]
PASSED: Array.hasOwnProperty('DESCENDING') [array.as:55]
PASSED: Array.hasOwnProperty('UNIQUESORT') [array.as:56]
PASSED: Array.hasOwnProperty('RETURNINDEXEDARRAY') [array.as:57]
PASSED: Array.hasOwnProperty('NUMERIC') [array.as:58]
PASSED: Array.prototype.hasOwnProperty('concat') [array.as:59]
PASSED: Array.prototype.hasOwnProperty('join') [array.as:60]
PASSED: Array.prototype.hasOwnProperty('pop') [array.as:61]
PASSED: Array.prototype.hasOwnProperty('push') [array.as:62]
PASSED: Array.prototype.hasOwnProperty('reverse') [array.as:63]
PASSED: Array.prototype.hasOwnProperty('shift') [array.as:64]
PASSED: Array.prototype.hasOwnProperty('slice') [array.as:65]
PASSED: Array.prototype.hasOwnProperty('sort') [array.as:66]
PASSED: Array.prototype.hasOwnProperty('sortOn') [array.as:67]
PASSED: Array.prototype.hasOwnProperty('splice') [array.as:68]
PASSED: Array.prototype.hasOwnProperty('unshift') [array.as:69]
PASSED: Array.prototype.hasOwnProperty('toString') [array.as:70]
PASSED: !Array.prototype.hasOwnProperty('length') [array.as:71]
PASSED: !Array.prototype.hasOwnProperty('valueOf') [array.as:72]
PASSED: !Array.prototype.hasOwnProperty('size') [array.as:73]
PASSED: typeof(Array()) == 'object' [array.as:76]
PASSED: typeof(new Array()) == 'object' [array.as:77]
PASSED: typeof(f) == 'function' [array.as:79]
PASSED: typeof(a) == 'object' [array.as:81]
PASSED: typeof(a.pop) == 'function' [array.as:82]
PASSED: typeof(a.size) == 'undefined' [array.as:100]
PASSED: a instanceOf Array [array.as:102]
PASSED: a.length == 3 [array.as:103]
PASSED: a.hasOwnProperty('length') [array.as:105]
PASSED: typeof(primitiveArrayValue) == 'object' [array.as:109]
PASSED: primitiveArrayValue == a [array.as:110]
PASSED: primitiveArrayValue === a [array.as:112]
PASSED: a != undefined [array.as:118]
PASSED: typeof(a) == "object" [array.as:119]
PASSED: a != b [array.as:122]
PASSED: tmp.toString() == "undefined,undefined" [array.as:127]
PASSED: tmp.length == 1 [array.as:133]
PASSED: a.length == 3 [array.as:135]
PASSED: a[2] == 12 [array.as:136]
PASSED: popped == 12 [array.as:138]
PASSED: a[2] == undefined [array.as:139]
PASSED: a[1] == "asdf" [array.as:140]
PASSED: a[1] == 551 [array.as:142]
PASSED: a[0] == 200 [array.as:144]
PASSED: a.toString() == "200,551" [array.as:145]
PASSED: a.length == 5 [array.as:147]
PASSED: a[100] == undefined [array.as:148]
PASSED: a[5] == undefined [array.as:149]
PASSED: a[4] == 9 [array.as:150]
PASSED: a.join() == "200,551,7,8,9" [array.as:151]
PASSED: a.join() == "9,8,7,551,200" [array.as:153]
PASSED: Array.prototype.join.apply(a) == "9,8,7,551,200" [array.as:155]
PASSED: a.join.apply(a) == "9,8,7,551,200" [array.as:156]
PASSED: a.join("test") == "9test8test7test551test200" [array.as:162]
PASSED: typeof(Array.UNIQUE) == 'undefined' [array.as:165]
PASSED: (undefined|1) == 1 [array.as:171]
PASSED: (1|undefined) == 1 [array.as:172]
PASSED: (undefined&1) == 0 [array.as:173]
PASSED: (1&undefined) == 0 [array.as:174]
PASSED: (undefined^1) == 1 [array.as:175]
PASSED: (1^undefined) == 1 [array.as:176]
PASSED: Array.UNIQUE | Array.CASEINSENSITIVE | Array.RETURNINDEXEDARRAY == 9 [array.as:179]
PASSED: a.toString() == "200,551,7,8,9" [array.as:183]
PASSED: a.toString() == "7,7,7,7,7,8,8,8,9,200,200,200,200,551,551" [array.as:187]
PASSED: a.toString() == "7,7,7,7,7,8,8,8,9,200,200,200,200,551,551" [array.as:190]
PASSED: trysortarray.toString() == "alphabet,But,capitalization,Different" [array.as:195]
PASSED: trysortarray.toString() == "But,Different,alphabet,capitalization" [array.as:197]
PASSED: gaparray.length == 17 [array.as:202]
PASSED: gaparray[4] == '4' [array.as:203]
PASSED: gaparray[16] == '16' [array.as:204]
PASSED: gaparray.hasOwnProperty('4') [array.as:206]
PASSED: gaparray.hasOwnProperty('16') [array.as:207]
PASSED: !gaparray.hasOwnProperty('0') [array.as:208]
PASSED: !gaparray.hasOwnProperty('1') [array.as:209]
PASSED: gaparray.length == 17 [array.as:212]
PASSED: gaparray[0] == '16' [array.as:217]
PASSED: gaparray[1] == '4' [array.as:218]
PASSED: gaparray[2] == undefined [array.as:220]
PASSED: gaparray[3] == undefined [array.as:221]
PASSED: gaparray[4] == undefined [array.as:222]
PASSED: gaparray[5] == undefined [array.as:223]
PASSED: gaparray[6] == undefined [array.as:224]
PASSED: gaparray[7] == undefined [array.as:225]
PASSED: gaparray[8] == undefined [array.as:226]
PASSED: gaparray[9] == undefined [array.as:227]
PASSED: gaparray[10] == undefined [array.as:228]
PASSED: gaparray[11] == undefined [array.as:229]
PASSED: gaparray[12] == undefined [array.as:230]
PASSED: gaparray[13] == undefined [array.as:231]
PASSED: gaparray[14] == undefined [array.as:232]
PASSED: gaparray[15] == undefined [array.as:237]
PASSED: gaparray[16] == undefined [array.as:238]
XPASSED: gaparray.hasOwnProperty('16') [array.as:248]
XPASSED: gaparray.hasOwnProperty('4') [array.as:249]
PASSED: gaparray.hasOwnProperty('1') [array.as:250]
PASSED: gaparray.hasOwnProperty('0') [array.as:251]
XPASSED: gaparray.hasOwnProperty('2') [array.as:252]
XPASSED: tmp.length == '5' [array.as:264]
PASSED: tmp[0] == '0' [array.as:265]
PASSED: tmp[1] == '1' [array.as:266]
XPASSED: tmp[2] == '16' [array.as:267]
XPASSED: tmp[3] == '2' [array.as:268]
XPASSED: tmp[4] == '4' [array.as:269]
PASSED: trysortarray.toString() == "But,Different,alphabet,capitalization" [array.as:292]
PASSED: trysortarray.toString() == "But,alphabet,Different,capitalization" [array.as:294]
XPASSED: typeof(testCmpThis) == 'undefined' [array.as:295]
XPASSED: testCmpCalls == 7 [array.as:296]
PASSED: trysortarray.toString() == "But,alphabet,Different,capitalization" [array.as:300]
XPASSED: trysortarray.toString() == "alphabet,Different,capitalization,But" [array.as:304]
XPASSED: trysortarray.toString() == "alphabet,Different,capitalization,But" [array.as:308]
XPASSED: trysortarray.toString() == "alphabet,Different,capitalization,But" [array.as:312]
XPASSED: trysortarray.length == 0 [array.as:316]
PASSED: trysortarray.toString() == "1,2,3,4" [array.as:320]
PASSED: trysortarray.length == 4 [array.as:321]
PASSED: trysortarray.length == 4 [array.as:323]
XPASSED: trysortarray.toString() == "2,3,4,1" [array.as:324]
PASSED: typeof(c) == "object" [array.as:332]
PASSED: c[0] == "zero" [array.as:337]
XPASSED: c[1] == "one" [array.as:338]
PASSED: c[1.1] == "one point one" [array.as:339]
XPASSED: c[1.9] == undefined [array.as:340]
PASSED: c[-3] == "minus three" [array.as:341]
PASSED: c[-3.7] == undefined [array.as:342]
PASSED: c[0] == "zero" [array.as:345]
XPASSED: c[1] == "one" [array.as:346]
XPASSED: c[0] == undefined [array.as:351]
XPASSED: c[1] == undefined [array.as:352]
XPASSED: c[2] == undefined [array.as:353]
XPASSED: c[3] == undefined [array.as:354]
PASSED: c[1.1] == "one point one" [array.as:355]
PASSED: c[-2147483649] == "too low" [array.as:356]
PASSED: c[int(-2147483649)] == undefined [array.as:358]
PASSED: c[-2147483649] == "too low" [array.as:361]
PASSED: c[2147483649] == "too high" [array.as:362]
XPASSED: c[1] == undefined [array.as:363]
XPASSED: c[2] == undefined [array.as:364]
XPASSED: c[3] == undefined [array.as:365]
XPASSED: c.length == -2147483646 [array.as:367]
XPASSED: str == "2147483649: too high; -2147483649: too low; -2147483648: lowest int; -3: minus three; 1.1: one point one; " [array.as:375]
PASSED: c[0] == "zero" [array.as:381]
XPASSED: c[1] == "one" [array.as:382]
PASSED: c[0] == "zero" [array.as:386]
XPASSED: c[1] == "one" [array.as:387]
PASSED: c[0xffffffff] == undefined [array.as:388]
PASSED: c[0xffffffff + 1] == "too high" [array.as:389]
PASSED: c[0xfffffffffffffffff] == "much too high" [array.as:392]
PASSED: c[0] == "zero" [array.as:396]
XPASSED: c[1] == "one" [array.as:397]
XPASSED: c.length == 2147483647 [array.as:399]
XPASSED: str == "-2147483650: still lower; 2.95147905179353e+20: much too high; 4294967296: too high; -3: minus three; 1.1: one point one; 3: three; 2: two; 1: one; 0: zero; " [array.as:408]
PASSED: sparse[3] == 3 [array.as:414]
PASSED: sparse[3] == 3 [array.as:416]
PASSED: popped == 12 [array.as:424]
PASSED: popped == "asdf" [array.as:426]
PASSED: popped == 551 [array.as:428]
PASSED: popped == undefined [array.as:431]
PASSED: b.length == 0 [array.as:433]
PASSED: b.toString() == "2,4" [array.as:438]
PASSED: b.toString() == "" [array.as:441]
PASSED: b.toString() == "" [array.as:449]
PASSED: count == 1 [array.as:455]
PASSED: !sparse.hasOwnProperty(0) [array.as:457]
PASSED: sparse.hasOwnProperty(5) [array.as:458]
PASSED: sparse.toString() == "undefined,undefined,undefined,undefined,undefined,5" [array.as:463]
PASSED: count == 6 [array.as:467]
PASSED: sparse.hasOwnProperty(0) [array.as:469]
PASSED: sparse.hasOwnProperty(5) [array.as:470]
PASSED: sparse.toString() == "5,undefined,undefined,undefined,undefined,undefined" [array.as:475]
PASSED: s == "undefined^1^undefined^3" [array.as:490]
PASSED: bclone.length == 0 [array.as:499]
PASSED: b.length == 0 [array.as:500]
PASSED: concatted.join() == "0,1,2,3,4,5,6" [array.as:503]
PASSED: concatted[4] == 4 [array.as:504]
PASSED: basic.toString() == "0,1,2" [array.as:505]
PASSED: portion.toString() == "2,3,4" [array.as:507]
PASSED: portion.toString() == "3,4" [array.as:509]
PASSED: portion.toString() == "4" [array.as:511]
PASSED: portion.length == 1 [array.as:512]
PASSED: portion.toString() == "5" [array.as:514]
PASSED: portion.toString() == "5,6" [array.as:516]
PASSED: mixed.toString() == "5,6,7,8,9" [array.as:518]
PASSED: mixed.toString() == "5,6,7,8,9,10,11,12,13" [array.as:520]
PASSED: portion.toString() == "" [array.as:524]
PASSED: portion.toString() == "0,1,2,3,4,5,6" [array.as:526]
PASSED: portion.toString() == "0,1,2" [array.as:528]
PASSED: portion.toString() == "" [array.as:530]
PASSED: portion.toString() == "0,1" [array.as:534]
PASSED: count == 1 [array.as:549]
PASSED: count == 1 [array.as:552]
PASSED: count == 7 [array.as:555]
PASSED: count == 5 [array.as:559]
PASSED: ary.toString() == "0,1,2,3,4,5" [array.as:566]
PASSED: ary.toString() == "0,1,2,3,4,5" [array.as:570]
PASSED: typeof(spliced) == "undefined" [array.as:571]
PASSED: ary.toString() == "1,2,3,4,5" [array.as:575]
PASSED: spliced.toString() == "0" [array.as:576]
PASSED: ary.toString() == "1,3,4,5" [array.as:578]
PASSED: spliced.toString() == "2" [array.as:579]
PASSED: ary.toString() == "1,3,4" [array.as:583]
PASSED: spliced.toString() == "5" [array.as:584]
PASSED: ary.toString() == "1,4" [array.as:586]
PASSED: spliced.toString() == "3" [array.as:587]
PASSED: ary.toString() == "1,4" [array.as:591]
PASSED: spliced.toString() == "" [array.as:592]
PASSED: ary.toString() == "1,4" [array.as:594]
PASSED: spliced.toString() == "" [array.as:595]
PASSED: ary.toString() == "4" [array.as:599]
PASSED: spliced.toString() == "1" [array.as:600]
PASSED: ary.toString() == "0,1,2,3,4,5,6,7,8" [array.as:607]
PASSED: spliced.toString() == "" [array.as:608]
PASSED: ary.toString() == "0,1" [array.as:612]
PASSED: spliced.toString() == "2,3,4,5,6,7,8" [array.as:613]
PASSED: ary.toString() == "2,3,4,5,6" [array.as:616]
PASSED: spliced.toString() == "7,8" [array.as:617]
PASSED: typeof(spliced) == 'undefined' [array.as:621]
PASSED: ary.toString() == "2,3,4,5,6" [array.as:622]
PASSED: typeof(spliced) == 'undefined' [array.as:624]
PASSED: ary.toString() == "2,3,4,5,6" [array.as:625]
PASSED: typeof(spliced) == 'undefined' [array.as:627]
PASSED: ary.toString() == "2,3,4,5,6" [array.as:628]
PASSED: typeof(spliced) == 'undefined' [array.as:630]
PASSED: ary.toString() == "2,3,4,5,6" [array.as:631]
PASSED: ary.toString() == "2,a,b,c,4,5,6" [array.as:635]
PASSED: spliced.toString() == '3' [array.as:636]
PASSED: ary.toString() == "2,a,b,8,5,6" [array.as:638]
PASSED: spliced.toString() == 'c,4' [array.as:639]
PASSED: ary.toString() == "2,a,b,10,11,12,8,5,6" [array.as:643]
PASSED: spliced.toString() == '' [array.as:644]
PASSED: ary.toString() == "1,2,3,4,5,6" [array.as:648]
PASSED: ary.length == 4 [array.as:649]
PASSED: spliced.toString() == '2,a,b,10,11,12,8' [array.as:650]
PASSED: spliced.toString() == "3,4,5,6" [array.as:654]
PASSED: spliced.toString() == "1,2" [array.as:656]
PASSED: ary.length == 8 [array.as:661]
PASSED: count == 2 [array.as:663]
PASSED: ary.length == 8 [array.as:666]
PASSED: count == 8 [array.as:668]
PASSED: ary.length == 9 [array.as:672]
PASSED: count == 9 [array.as:674]
PASSED: ary[3] == 3 [array.as:675]
PASSED: ary[2] == 2 [array.as:676]
PASSED: count == 8 [array.as:681]
PASSED: count == 1 [array.as:683]
PASSED: a instanceOf Array [array.as:690]
PASSED: typeof(c) == "object" [array.as:691]
PASSED: c.length == 10 [array.as:692]
PASSED: c[5] == undefined [array.as:693]
PASSED: c[1000] == 283 [array.as:695]
PASSED: c[1001] == undefined [array.as:696]
PASSED: c[999] == undefined [array.as:697]
PASSED: c.length == 1001 [array.as:698]
PASSED: c[8] == 'eight' [array.as:703]
PASSED: c.length == 2 [array.as:705]
PASSED: c[8] == undefined [array.as:706]
PASSED: c[0] == 'zero' [array.as:707]
XPASSED: c.length == -1 [array.as:710]
PASSED: c[0] == undefined [array.as:711]
PASSED: c.length == 3 [array.as:718]
PASSED: c[0] == 10 [array.as:719]
PASSED: c[1] == 20 [array.as:720]
PASSED: c[2] == 30 [array.as:721]
PASSED: c.hasOwnProperty('0') [array.as:723]
PASSED: c.hasOwnProperty('1') [array.as:724]
PASSED: c.hasOwnProperty('2') [array.as:725]
PASSED: delete c[1] [array.as:727]
PASSED: c.length == 3 [array.as:728]
PASSED: c[0] == 10 [array.as:729]
PASSED: typeof(c[1]) == 'undefined' [array.as:730]
PASSED: c[2] == 30 [array.as:731]
PASSED: c.hasOwnProperty('0') [array.as:733]
PASSED: !c.hasOwnProperty('1') [array.as:734]
PASSED: c.hasOwnProperty('2') [array.as:735]
PASSED: c.length == 11 [array.as:739]
XPASSED: ! delete c[2] [array.as:741]
XPASSED: c[2] == 30 [array.as:742]
XPASSED: c[2] == 30 [array.as:744]
PASSED: typeof(c[10]) == 'undefined' [array.as:745]
PASSED: typeof(c[10]) == 'undefined' [array.as:747]
PASSED: r.toString() == ",Jedit,ed,emacs,nano,vi" [array.as:795]
PASSED: a.toString() == ",Jedit,ed,emacs,nano,vi" [array.as:796]
PASSED: a.toString() == ",ed,emacs,Jedit,nano,vi" [array.as:798]
PASSED: a.toString() == ",Jedit,ed,emacs,nano,vi" [array.as:800]
PASSED: a.toString() == ",ed,emacs,Jedit,nano,vi" [array.as:802]
PASSED: a.toString() == ",Jedit,ed,emacs,nano,vi" [array.as:804]
PASSED: r.toString() == "vi,nano,emacs,ed,Jedit," [array.as:806]
PASSED: a.toString() == "vi,nano,emacs,ed,Jedit," [array.as:807]
PASSED: r.toString() == "-2,-7,-9,0,1,3,5,8" [array.as:810]
PASSED: b.toString() == "-2,-7,-9,0,1,3,5,8" [array.as:811]
PASSED: b.toString() == "-9,-7,-2,0,1,3,5,8" [array.as:813]
PASSED: b.toString() == "-2,-7,-9,0,1,3,5,8" [array.as:815]
PASSED: b.toString() == "8,5,3,1,0,-9,-7,-2" [array.as:817]
PASSED: r.toString() == "8,5,3,1,0,-2,-7,-9" [array.as:819]
PASSED: b.toString() == "8,5,3,1,0,-2,-7,-9" [array.as:820]
PASSED: r.toString() == "8,5,3,1,0,-2,-7,-9" [array.as:822]
PASSED: b.toString() == "8,5,3,1,0,-2,-7,-9" [array.as:823]
PASSED: b.toString() == "8,5,3,1,0,-2,-7,-9" [array.as:825]
PASSED: b.toString() == "8,5,3,1,0,-2,-7,-9" [array.as:827]
PASSED: r.toString() == "-0.5,-3.7,0,0.001,2,7.2,8.35,Infinity" [array.as:830]
PASSED: c.toString() == "-0.5,-3.7,0,0.001,2,7.2,8.35,Infinity" [array.as:831]
PASSED: c.toString() == "-0.5,-3.7,0,0.001,2,7.2,8.35,Infinity" [array.as:833]
PASSED: c.toString() == "-3.7,-0.5,0,0.001,2,7.2,8.35,Infinity" [array.as:835]
PASSED: c.toString() == "-0.5,-3.7,0,0.001,2,7.2,8.35,Infinity" [array.as:837]
PASSED: c.toString() == "Infinity,8.35,7.2,2,0.001,0,-0.5,-3.7" [array.as:839]
PASSED: r.toString() == "" [array.as:842]
PASSED: d.toString() == "" [array.as:843]
PASSED: d.toString() == "" [array.as:845]
PASSED: d.toString() == "" [array.as:847]
PASSED: r.toString() == "singleton" [array.as:850]
PASSED: e.toString() == "singleton" [array.as:851]
PASSED: e.toString() == "singleton" [array.as:853]
PASSED: e.toString() == "singleton" [array.as:855]
PASSED: r.toString() == "Name,Name,Year" [array.as:858]
PASSED: f.toString() == "Name,Name,Year" [array.as:859]
PASSED: r.toString() == "0" [array.as:861]
PASSED: f.toString() == "Year,Name,Name" [array.as:863]
PASSED: r.toString() == "5,4,3,2,1,0" [array.as:868]
PASSED: a.toString() == "vi,nano,emacs,ed,Jedit," [array.as:869]
PASSED: r.toString() == "0,1,4,2,3,5" [array.as:871]
PASSED: a.toString() == "vi,nano,emacs,ed,Jedit," [array.as:872]
PASSED: r.toString() == "5,6,7,4,3,2,1,0" [array.as:874]
PASSED: r.toString() == "7,6,5,4,3,2,1,0" [array.as:876]
PASSED: r.toString() == "0,1,2,3,4,7,6,5" [array.as:878]
PASSED: r.toString() == "6,7,5,4,3,2,1,0" [array.as:880]
PASSED: r.toString() == "7,6,5,4,3,2,1,0" [array.as:882]
PASSED: r.toString() == "0,1,2,3,4,5,7,6" [array.as:884]
PASSED: r.toString() == "" [array.as:886]
PASSED: d.toString() == "" [array.as:887]
PASSED: r.toString() == "" [array.as:889]
PASSED: d.toString() == "" [array.as:890]
PASSED: r.toString() == "0" [array.as:892]
PASSED: e.toString() == "singleton" [array.as:893]
PASSED: r.toString() == "0" [array.as:895]
PASSED: r.toString() == ",vi,ed,nano,emacs,Jedit" [array.as:899]
PASSED: a.toString() == ",vi,ed,nano,emacs,Jedit" [array.as:900]
PASSED: typeof(r) == 'undefined' [array.as:902]
PASSED: tolen(r) == "[5, 5, 4, 2, 2, 0]" [array.as:904]
PASSED: tolen(a) == "[5, 5, 4, 2, 2, 0]" [array.as:905]
PASSED: tolen(a) == "[0, 2, 2, 4, 5, 5]" [array.as:907]
PASSED: r.toString() == "0,1,2,3,4,5" [array.as:909]
PASSED: r.toString() == "5,4,3,2,1,0" [array.as:911]
PASSED: r.toString() == "" [array.as:913]
PASSED: d.toString() == "" [array.as:914]
PASSED: r.toString() == "" [array.as:916]
PASSED: d.toString() == "" [array.as:917]
PASSED: r.toString() == "singleton" [array.as:919]
PASSED: e.toString() == "singleton" [array.as:920]
PASSED: tolen(r) == "[5, 5, 4, 2, 2, 0]" [array.as:924]
PASSED: tolen(a) == "[5, 5, 4, 2, 2, 0]" [array.as:925]
PASSED: tolen(a) == "[0, 2, 2, 4, 5, 5]" [array.as:927]
PASSED: r.toString() == "0,1,2,3,4,5" [array.as:929]
PASSED: r.toString() == "5,4,3,2,1,0" [array.as:931]
PASSED: e.toString() == "singleton" [array.as:933]
PASSED: r.toString() == ",ED,Jedit,ed,emacs,nano,vi" [array.as:942]
PASSED: a.toString() == ",ED,Jedit,ed,emacs,nano,vi" [array.as:943]
PASSED: r.toString() == "0" [array.as:945]
PASSED: a.toString() == ",ED,Jedit,ed,emacs,nano,vi" [array.as:946]
PASSED: r.toString() == "0" [array.as:948]
PASSED: a.toString() == ",ED,Jedit,ed,emacs,nano,vi" [array.as:949]
PASSED: r.toString() == "0,1,2,3,4,5,6" [array.as:951]
PASSED: r.toString() == "0" [array.as:953]
PASSED: r.toString() == "0" [array.as:956]
PASSED: b.toString() == "8,5,3,1,0,-2,-7,-9,3" [array.as:957]
PASSED: r.toString() == "0" [array.as:959]
PASSED: r.toString() == "0" [array.as:961]
PASSED: r.toString() == "0" [array.as:963]
PASSED: r.toString() == "0" [array.as:965]
PASSED: r.toString() == "0" [array.as:968]
PASSED: c.toString() == "Infinity,8.35,7.2,2,0.001,0,-0.5,-3.7,Infinity" [array.as:969]
PASSED: r.toString() == "0" [array.as:971]
PASSED: r.toString() == "0" [array.as:973]
PASSED: r.toString() == "0" [array.as:975]
PASSED: r.toString() == "0" [array.as:977]
PASSED: tolen(r) == "[0, 2, 2, 2, 4, 5, 5]" [array.as:979]
PASSED: tolen(a) == "[0, 2, 2, 2, 4, 5, 5]" [array.as:980]
PASSED: r.toString() == "0,1,2,3,4,5,6" [array.as:982]
PASSED: r.toString() == "6,5,4,3,2,1,0" [array.as:984]
PASSED: r.toString() == "-0.5,-3.7,0,0.001,2,7.2,8.35,Infinity,Infinity,null" [array.as:990]
PASSED: c.toString() == "-0.5,-3.7,0,0.001,2,7.2,8.35,Infinity,Infinity,null" [array.as:991]
PASSED: c.toString() == "-3.7,-0.5,0,0.001,2,7.2,8.35,Infinity,Infinity,null" [array.as:993]
PASSED: c.toString() == "null,Infinity,Infinity,8.35,7.2,2,0.001,0,-0.5,-3.7" [array.as:995]
PASSED: r.toString() == "9,8,7,6,5,4,3,1,2,0" [array.as:997]
PASSED: r.toString() == "0,1,2,3,4,5,6,7,9,8" [array.as:999]
PASSED: r.toString() == "0" [array.as:1001]
PASSED: r.toString() == "0" [array.as:1003]
PASSED: r.toString() == "0" [array.as:1005]
PASSED: r.toString() == "0" [array.as:1007]
PASSED: c.toString() == "-3.7,-0.5,0,0.001,2,7.2,8.35,Infinity,null,null" [array.as:1012]
PASSED: c.toString() == "null,null,Infinity,8.35,7.2,2,0.001,0,-0.5,-3.7" [array.as:1014]
PASSED: r.toString() == "9,8,7,6,5,4,3,2,0,1" [array.as:1016]
PASSED: c.toString() == "null,null,Infinity,8.35,7.2,2,0.001,0,-0.5,-3.7" [array.as:1017]
PASSED: r.toString() == "0" [array.as:1019]
PASSED: r.toString() == "0" [array.as:1021]
PASSED: r.toString() == "0" [array.as:1026]
PASSED: r.toString() == "0" [array.as:1028]
PASSED: r.toString() == "0" [array.as:1033]
PASSED: r.toString() == "0" [array.as:1035]
PASSED: tostr(r) == "Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1065]
PASSED: tostr(a) == "Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1066]
PASSED: tostr(r) == "Zuse Z3,1941,false | Colossus,1943,true | ENIAC,1944,true" [array.as:1069]
PASSED: tostr(a) == "Zuse Z3,1941,false | Colossus,1943,true | ENIAC,1944,true" [array.as:1070]
PASSED: tostr(a) == "Zuse Z3,1941,false | Colossus,1943,true | ENIAC,1944,true" [array.as:1073]
PASSED: tostr(a) == "Zuse Z3,1941,false | Colossus,1943,true | ENIAC,1944,true" [array.as:1076]
PASSED: tostr(a) == "ENIAC,1944,true | Colossus,1943,true | Zuse Z3,1941,false" [array.as:1079]
PASSED: tostr(r) == "Zuse Z3,1941,false | Colossus,1943,true | ENIAC,1944,true" [array.as:1082]
PASSED: tostr(a) == "Zuse Z3,1941,false | Colossus,1943,true | ENIAC,1944,true" [array.as:1083]
PASSED: r.toString() == "0,1,2" [array.as:1086]
PASSED: tostr(a) == "Zuse Z3,1941,false | Colossus,1943,true | ENIAC,1944,true" [array.as:1087]
PASSED: tostr(r) == "Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1090]
PASSED: tostr(a) == "Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1091]
PASSED: tostr(r) == "Zuse Z3,1941,false | ENIAC,1944,true | Colossus,1943,true" [array.as:1094]
PASSED: r.toString() == "2,1,0" [array.as:1097]
PASSED: r.toString() == "0" [array.as:1100]
PASSED: tostr(a) == "Zuse Z3,1941,false | ENIAC,1944,true | Colossus,1943,true" [array.as:1101]
PASSED: tostr(r) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1107]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1108]
PASSED: tostr(a) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true" [array.as:1111]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1114]
PASSED: tostr(r) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1117]
PASSED: tostr(r) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true" [array.as:1120]
PASSED: tostr(r) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true" [array.as:1125]
PASSED: tostr(a) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true" [array.as:1126]
PASSED: tostr(a) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true" [array.as:1129]
PASSED: tostr(a) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true" [array.as:1132]
PASSED: tostr(a) == "Zuse Z3,1941,false | ENIAC,1944,true | Colossus,1943,true | Atanasoff-Berry,1941,true" [array.as:1135]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1138]
PASSED: tostr(r) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true" [array.as:1141]
PASSED: tostr(a) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true" [array.as:1142]
PASSED: r.toString() == "0" [array.as:1145]
PASSED: tostr(r) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1149]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1150]
PASSED: tostr(r) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1153]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1154]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1157]
PASSED: tostr(r) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1160]
PASSED: tostr(r) == "Zuse Z3,1941,false | ENIAC,1944,true | Colossus,1943,true | Atanasoff-Berry,1941,true" [array.as:1164]
PASSED: tostr(a) == "Zuse Z3,1941,false | ENIAC,1944,true | Colossus,1943,true | Atanasoff-Berry,1941,true" [array.as:1165]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Zuse Z3,1941,false | Colossus,1943,true | ENIAC,1944,true" [array.as:1168]
PASSED: tostr(a) == "ENIAC,1944,true | Colossus,1943,true | Atanasoff-Berry,1941,true | Zuse Z3,1941,false" [array.as:1171]
PASSED: tostr(r) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1174]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1175]
PASSED: tostr(r) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1178]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1179]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1184]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1187]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1190]
PASSED: tostr(a) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true" [array.as:1193]
PASSED: tostr(r) == "Name,Year,Year | Year,Name,Year" [array.as:1198]
PASSED: tostr(b) == "Name,Year,Year | Year,Name,Year" [array.as:1199]
PASSED: tostr(b) == "Year,Name,Year | Name,Year,Year" [array.as:1201]
PASSED: tostr(b) == "Name,Year,Year | Year,Name,Year" [array.as:1203]
PASSED: r == undefined [array.as:1207]
PASSED: tostr(a) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true" [array.as:1208]
PASSED: typeof(r) == 'object' [array.as:1211]
PASSED: r instanceof Array [array.as:1212]
PASSED: tostr(a) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true" [array.as:1213]
PASSED: tostr(a) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true" [array.as:1217]
PASSED: tostr(a) == "Harvard Mark I,1944,undefined | ENIAC,1944,true | Colossus,1943,true | Atanasoff-Berry,1941,true | Zuse Z3,1941,false" [array.as:1232]
PASSED: tostr(a) == "Zuse Z3,1941,false | ENIAC,1944,true | Colossus,1943,true | Atanasoff-Berry,1941,true | Harvard Mark I,1944,undefined" [array.as:1235]
PASSED: tostr(r) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Harvard Mark I,1944,undefined" [array.as:1238]
PASSED: tostr(a) == "Zuse Z3,1941,false | Atanasoff-Berry,1941,true | Colossus,1943,true | ENIAC,1944,true | Harvard Mark I,1944,undefined" [array.as:1239]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Harvard Mark I,1944,undefined | Colossus,1943,true | ENIAC,1944,true | Zuse Z3,1941,false" [array.as:1242]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Harvard Mark I,1944,undefined | Zuse Z3,1941,false | Colossus,1943,true | ENIAC,1944,true" [array.as:1245]
PASSED: tostr(a) == "Atanasoff-Berry,1941,true | Harvard Mark I,1944,undefined | Zuse Z3,1941,false | ENIAC,1944,true | Colossus,1943,true" [array.as:1248]
PASSED: tostr(a) == "Zuse Z3,1941,false | Colossus,1943,true | ENIAC,1944,true | Atanasoff-Berry,1941,true | Harvard Mark I,1944,undefined" [array.as:1251]
PASSED: r.toString() == "0,3,1,2,4" [array.as:1254]
PASSED: out['len'] == 3 [array.as:1264]
PASSED: out[0] == 1 [array.as:1265]
PASSED: out[1] == 1 [array.as:1266]
PASSED: out[2] == 1 [array.as:1267]
PASSED: out['len'] == 0 [array.as:1271]
PASSED: out['len'] == 0 [array.as:1276]
PASSED: out['len'] == 1 [array.as:1280]
PASSED: out[1] == 1 [array.as:1281]
PASSED: out['len'] == 2 [array.as:1285]
PASSED: out[1] == 1 [array.as:1286]
PASSED: out[0] == 1 [array.as:1287]
PASSED: a.length == 0 [array.as:1294]
PASSED: a.length == 0 [array.as:1296]
PASSED: a[-1] == 'minusone' [array.as:1297]
PASSED: a.length == 0 [array.as:1299]
PASSED: a["Infinite"] == 'inf' [array.as:1300]
PASSED: ret == true [array.as:1313]
PASSED: getCalls == 1 [array.as:1316]
PASSED: setCalls == 0 [array.as:1317]
PASSED: getCalls == 0 [array.as:1320]
XPASSED: setCalls == 1 [array.as:1321]
PASSED: ret == true [array.as:1324]
XPASSED: getCalls == 1 [array.as:1327]
PASSED: setCalls == 0 [array.as:1328]
PASSED: getCalls == 0 [array.as:1331]
XPASSED: setCalls == 1 [array.as:1332]
PASSED: a.length == 3 [array.as:1334]
XPASSED: a.length == 4 [array.as:1336]
PASSED: getCalls == 0 [array.as:1341]
PASSED: setCalls == 0 [array.as:1342]
PASSED: a.length == 2 [array.as:1354]
PASSED: a.length == 1 [array.as:1356]
PASSED: f == 'zero' [array.as:1357]
XPASSED: a[0] == 'zero' [array.as:1358]
PASSED: typeof(a[1]) == 'undefined' [array.as:1359]
PASSED: !a.hasOwnProperty(1) [array.as:1361]
PASSED: a.length == 2 [array.as:1368]
PASSED: a.length == 1 [array.as:1370]
PASSED: f == 'zero' [array.as:1371]
PASSED: a[0] == 'one' [array.as:1372]
XPASSED: a[1] == 'one' [array.as:1373]
PASSED: a.hasOwnProperty(0) [array.as:1375]
XPASSED: a.hasOwnProperty(1) [array.as:1376]
PASSED: a.length == 2 [array.as:1387]
XPASSED: a[0] == 'zero' [array.as:1389]
PASSED: a.length == 1 [array.as:1391]
XPASSED: f == 'zero' [array.as:1392]
PASSED: a[0] == 'one' [array.as:1393]
PASSED: typeof(a[1]) == 'undefined' [array.as:1394]
PASSED: a[0] == 'overridden' [array.as:1396]
PASSED: !a.hasOwnProperty(1) [array.as:1398]
XPASSED: a[1] == 'one' [array.as:1407]
PASSED: a.length == 3 [array.as:1408]
PASSED: a.length == 2 [array.as:1410]
PASSED: f == 'zero' [array.as:1411]
XPASSED: a[0] == 'one' [array.as:1412]
PASSED: a[1] == 'two' [array.as:1413]
PASSED: typeof(a[2]) == 'undefined' [array.as:1414]
PASSED: a[1] == 'overridden' [array.as:1416]
PASSED: a.hasOwnProperty(0) [array.as:1418]
PASSED: a.hasOwnProperty(1) [array.as:1419]
PASSED: !a.hasOwnProperty(2) [array.as:1420]
check_totals: 555
